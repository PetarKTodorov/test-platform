@model ConductTestVM

@{
    ViewData["Title"] = "Test";
    string dateFormat = "HH:mm";
    string clockDateFormat = "dd/MM/yyyy HH:mm";
}

<div class="position-relative u-z-index-100">
    <h1 class="text-center">@Model.TestTitle</h1>

    <div class="js-test-clock test-clock badge bg-secondary" data-end-date="@Model.EndDateTime.ToString(clockDateFormat)"></div>

    <div class="container-fluid px-5">

        <section class="text-center h4">
            <div class="mb-3">@Model.TestInstructions</div>

            <div>@Model.StartDateTime.ToString(dateFormat) - @Model.EndDateTime.ToString(dateFormat)</div>
        </section>

        <section class="text-center">
            @Html.PartialAsync("_DetailsGradeScale", Model.TestEvaluation).Result
        </section>


        <form class="js-conduct-test-form" asp-area="@ApplicationAreas.STUDENT" asp-controller="Tests" asp-action="FinishTest" method="post">

            @Html.HiddenFor(model => model.Id)

            @Html.HiddenFor(model => model.StartDateTime)

            @Html.HiddenFor(model => model.EndDateTime)

            @Html.HiddenFor(model => model.TestId)

            @Html.HiddenFor(model => model.TestTitle)

            @Html.HiddenFor(model => model.TestInstructions)


            @foreach (var (index, question) in Model.TestQuestions.Select((question, index) => (index, question)))
            {
                @Html.HiddenFor(model => model.TestQuestions[index].Id)
                @Html.HiddenFor(model => model.TestQuestions[index].QuestionId)
                @Html.HiddenFor(model => model.TestQuestions[index].QuestionOriginalQuestionTitle)
                @Html.HiddenFor(model => model.TestQuestions[index].QuestionQuestionTypeId)
                @Html.HiddenFor(model => model.TestQuestions[index].QuestionQuestionTypeName)
                @Html.HiddenFor(model => model.TestQuestions[index].QuestionSubjectTagName)
                @Html.HiddenFor(model => model.TestQuestions[index].Points)

                var accordionId = $"accordion-{index}";
                var accordionHeadingId = $"accordion-heading-${index}";
                var accordionBodyId = $"accordion-body-{index}";

                <div class="accordion my-3" id="@accordionId">
                    <div class="accordion-item">
                        <h2 class="accordion-header mt-0" id="@accordionHeadingId">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#@accordionBodyId" aria-expanded="true" aria-controls="@accordionBodyId">
                                <span class="d-flex flex-column">
                                    <span class="h6">
                                        @(index + 1). @question.QuestionOriginalQuestionTitle
                                    </span>

                                    <span class="small text-secondary fst-italic">
                                        Points: @question.Points
                                    </span>
                                </span>
                            </button>
                        </h2>
                        <div id="@accordionBodyId" class="accordion-collapse collapse show" aria-labelledby="@accordionHeadingId" data-bs-parent="#@accordionId">
                            <div class="accordion-body">
                                <div class="d-flex flex-column gap-3">
                                    @foreach (var (answer, answerIndex) in question.QuestionAnswers.Select((answer, answerIndex) => (answer, answerIndex)))
                                    {
                                        <div class="d-none">
                                            @Html.HiddenFor(model => model.TestQuestions[index].QuestionAnswers[answerIndex].AnswerId)
                                            @Html.HiddenFor(model => model.TestQuestions[index].QuestionAnswers[answerIndex].AnswerContent)
                                        </div>

                                        var inputId = $"Generated{index}{answerIndex}";

                                        <div class="d-flex gap-2">

                                            @if (question.QuestionQuestionTypeId == QuestionTypes.MultipleChoice.GetUid())
                                            {
                                                var checboxName = $"SelectedAnswerIds[{index}]"; // It does not matter, needs to be the different for every question

                                                @Html.CheckBox(checboxName, false,
                                    new { @class = "js-test-conduct-form-checkbox",
                                    data_answer_id = answer.AnswerId,
                                    data_answer_name = $"TestQuestions[{index}].SelectedAnswerIds",
                                    data_question_index = index,
                                    id = inputId })
                                            }
                                            else if (question.QuestionQuestionTypeId == QuestionTypes.SingleChoice.GetUid())
                                            {
                                                @Html.RadioButtonFor(model => model.TestQuestions[index].SelectedAnswerIds[0], answer.AnswerId, new { id = inputId })
                                            }

                                            @Html.Label(inputId, answer.AnswerContent, new { @class = "d-block w-100 p-1 border border-info rounded-1" })
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="d-flex justify-content-end mb-3">
                <button type="submit" class="btn btn-success">Submit test</button>
            </div>
        </form>
    </div>

    <button type="button" class="btn btn-primary d-none js-test-leave-modal-button" data-bs-toggle="modal" data-bs-target="#leave-test-modal">
        Launch leave test modal
    </button>

    
    <button class="btn btn-primary chat-button" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasExample" aria-controls="offcanvasExample">
        <span class="icon-font icon-font--chat-2 fs-4"></span>
        <span>Chat</span>
    </button>

    <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasExample" aria-labelledby="offcanvasExampleLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasExampleLabel">Room chat</h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body d-flex flex-column">
            <div class="chat">
                <div class="chat__message">
                    <p class="chat__message-text">How are you?</p>
                    <div class="chat__message-time">10:35</div>
                </div>


            </div> 

            <div>
                <form>
                    <div class="d-flex align-items-center gap-3">
                        <input type="text" class="form-control" />
                        <button type="submit" class="btn btn-primary">
                            <span class="icon-font icon-font--chat"></span>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    @section Scripts {
        <script asp-src-include="~/js/conduct-test*.js" defer></script>
    }
</div>