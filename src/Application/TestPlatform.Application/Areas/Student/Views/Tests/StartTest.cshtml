@model ConductTestVM

@{
    ViewData["Title"] = "Test";
    string dateFormat = "HH:mm";
}

<h1 class="text-center">@Model.TestTitle</h1>

<div class="container-fluid px-5">

    <section class="text-center h4">
        <div class="mb-3">@Model.TestInstructions</div>

        <div>@Model.StartDateTime.ToString(dateFormat) - @Model.EndDateTime.ToString(dateFormat)</div>
    </section>
    

    <form asp-area="@ApplicationAreas.STUDENT" asp-controller="Tests" asp-action="FinishTest" method="post">

        @Html.HiddenFor(model => model.Id)

        @Html.HiddenFor(model => model.StartDateTime)

        @Html.HiddenFor(model => model.EndDateTime)

        @Html.HiddenFor(model => model.TestId)

        @Html.HiddenFor(model => model.TestTitle)

        @Html.HiddenFor(model => model.TestInstructions)


        @foreach (var (index, question) in Model.TestQuestions.Select((question, index) => (index, question)))
        {
            @Html.HiddenFor(model => model.TestQuestions[index].Id)
            @Html.HiddenFor(model => model.TestQuestions[index].QuestionId)
            @Html.HiddenFor(model => model.TestQuestions[index].QuestionOriginalQuestionTitle)
            @Html.HiddenFor(model => model.TestQuestions[index].QuestionQuestionTypeId)
            @Html.HiddenFor(model => model.TestQuestions[index].QuestionQuestionTypeName)
            @Html.HiddenFor(model => model.TestQuestions[index].QuestionSubjectTagName)
            @Html.HiddenFor(model => model.TestQuestions[index].Points)

            var accordionId = $"accordion-{index}";
            var accordionHeadingId = $"accordion-heading-${index}";
            var accordionBodyId = $"accordion-body-{index}";

            <div class="accordion my-3" id="@accordionId">
                <div class="accordion-item">
                    <h2 class="accordion-header mt-0" id="@accordionHeadingId">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#@accordionBodyId" aria-expanded="true" aria-controls="@accordionBodyId">
                            <span class="d-flex flex-column">
                                <span class="h6">
                                    @question.QuestionOriginalQuestionTitle
                                </span>

                                <span class="small text-secondary fst-italic">
                                    Points: @question.Points
                                </span>
                            </span>
                        </button>
                    </h2>
                    <div id="@accordionBodyId" class="accordion-collapse collapse show" aria-labelledby="@accordionHeadingId" data-bs-parent="#@accordionId">
                        <div class="accordion-body">
                            <div class="d-flex flex-column gap-3">
                                @foreach (var (answer, answerIndex) in question.QuestionAnswers.Select((answer, answerIndex) => (answer, answerIndex)))
                                {
                                    <div class="d-none">
                                        @Html.HiddenFor(model => model.TestQuestions[index].QuestionAnswers[answerIndex].AnswerId)
                                        @Html.HiddenFor(model => model.TestQuestions[index].QuestionAnswers[answerIndex].AnswerContent)
                                    </div>

                                    var radioButtonId = "Generated" + answer.AnswerId.ToString();

                                    <div class="d-flex gap-2">

                                        @if (question.QuestionQuestionTypeId == QuestionTypes.MultipleChoice.GetUid())
                                        {
                                            @Html.CheckBox($"TestQuestions[{index}].SelectedAnswerIds[{answerIndex}]", false, new { @class = "js-test-conduct-form-checkbox", id = radioButtonId })
                                        }
                                        else if (question.QuestionQuestionTypeId == QuestionTypes.SingleChoice.GetUid())
                                        {
                                            @Html.RadioButtonFor(model => model.TestQuestions[index].SelectedAnswerIds[0], answer.AnswerId, new { id = radioButtonId })
                                        }

                                        @Html.Label(radioButtonId, answer.AnswerContent, new { @class = "d-block w-100 p-1 border border-info rounded-1" })
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="d-flex justify-content-end mb-3">
            <button type="submit" class="btn btn-success">Submit test</button>
        </div>
    </form>
</div>

